/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package wangzitian.realtime;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transactions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4941065245593169598L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transactions\",\"namespace\":\"wangzitian.realtime\",\"fields\":[{\"name\":\"LocalTimeStamp\",\"type\":\"int\"},{\"name\":\"QuotationFlag\",\"type\":[\"string\",\"null\"]},{\"name\":\"PacketTimeStampSH\",\"type\":[\"long\",\"null\"]},{\"name\":\"TradeTime\",\"type\":\"long\"},{\"name\":\"RecID\",\"type\":\"long\"},{\"name\":\"TradeChannelSH\",\"type\":[\"int\",\"null\"]},{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"TradePrice\",\"type\":\"double\"},{\"name\":\"TradeVolume\",\"type\":\"double\"},{\"name\":\"TradeAmount\",\"type\":\"double\"},{\"name\":\"BuyID\",\"type\":\"long\"},{\"name\":\"SellID\",\"type\":\"long\"},{\"name\":\"BuySellFlagSH\",\"type\":[\"string\",\"null\"]},{\"name\":\"SetIDSZ\",\"type\":[\"int\",\"null\"]},{\"name\":\"SymbolSourceSZ\",\"type\":[\"string\",\"null\"]},{\"name\":\"TradeTypeSZ\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transactions> ENCODER =
      new BinaryMessageEncoder<Transactions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transactions> DECODER =
      new BinaryMessageDecoder<Transactions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Transactions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Transactions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transactions>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Transactions to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Transactions from a ByteBuffer. */
  public static Transactions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int LocalTimeStamp;
  @Deprecated public java.lang.CharSequence QuotationFlag;
  @Deprecated public java.lang.Long PacketTimeStampSH;
  @Deprecated public long TradeTime;
  @Deprecated public long RecID;
  @Deprecated public java.lang.Integer TradeChannelSH;
  @Deprecated public java.lang.CharSequence Symbol;
  @Deprecated public double TradePrice;
  @Deprecated public double TradeVolume;
  @Deprecated public double TradeAmount;
  @Deprecated public long BuyID;
  @Deprecated public long SellID;
  @Deprecated public java.lang.CharSequence BuySellFlagSH;
  @Deprecated public java.lang.Integer SetIDSZ;
  @Deprecated public java.lang.CharSequence SymbolSourceSZ;
  @Deprecated public java.lang.CharSequence TradeTypeSZ;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transactions() {}

  /**
   * All-args constructor.
   * @param LocalTimeStamp The new value for LocalTimeStamp
   * @param QuotationFlag The new value for QuotationFlag
   * @param PacketTimeStampSH The new value for PacketTimeStampSH
   * @param TradeTime The new value for TradeTime
   * @param RecID The new value for RecID
   * @param TradeChannelSH The new value for TradeChannelSH
   * @param Symbol The new value for Symbol
   * @param TradePrice The new value for TradePrice
   * @param TradeVolume The new value for TradeVolume
   * @param TradeAmount The new value for TradeAmount
   * @param BuyID The new value for BuyID
   * @param SellID The new value for SellID
   * @param BuySellFlagSH The new value for BuySellFlagSH
   * @param SetIDSZ The new value for SetIDSZ
   * @param SymbolSourceSZ The new value for SymbolSourceSZ
   * @param TradeTypeSZ The new value for TradeTypeSZ
   */
  public Transactions(java.lang.Integer LocalTimeStamp, java.lang.CharSequence QuotationFlag, java.lang.Long PacketTimeStampSH, java.lang.Long TradeTime, java.lang.Long RecID, java.lang.Integer TradeChannelSH, java.lang.CharSequence Symbol, java.lang.Double TradePrice, java.lang.Double TradeVolume, java.lang.Double TradeAmount, java.lang.Long BuyID, java.lang.Long SellID, java.lang.CharSequence BuySellFlagSH, java.lang.Integer SetIDSZ, java.lang.CharSequence SymbolSourceSZ, java.lang.CharSequence TradeTypeSZ) {
    this.LocalTimeStamp = LocalTimeStamp;
    this.QuotationFlag = QuotationFlag;
    this.PacketTimeStampSH = PacketTimeStampSH;
    this.TradeTime = TradeTime;
    this.RecID = RecID;
    this.TradeChannelSH = TradeChannelSH;
    this.Symbol = Symbol;
    this.TradePrice = TradePrice;
    this.TradeVolume = TradeVolume;
    this.TradeAmount = TradeAmount;
    this.BuyID = BuyID;
    this.SellID = SellID;
    this.BuySellFlagSH = BuySellFlagSH;
    this.SetIDSZ = SetIDSZ;
    this.SymbolSourceSZ = SymbolSourceSZ;
    this.TradeTypeSZ = TradeTypeSZ;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return LocalTimeStamp;
    case 1: return QuotationFlag;
    case 2: return PacketTimeStampSH;
    case 3: return TradeTime;
    case 4: return RecID;
    case 5: return TradeChannelSH;
    case 6: return Symbol;
    case 7: return TradePrice;
    case 8: return TradeVolume;
    case 9: return TradeAmount;
    case 10: return BuyID;
    case 11: return SellID;
    case 12: return BuySellFlagSH;
    case 13: return SetIDSZ;
    case 14: return SymbolSourceSZ;
    case 15: return TradeTypeSZ;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: LocalTimeStamp = (java.lang.Integer)value$; break;
    case 1: QuotationFlag = (java.lang.CharSequence)value$; break;
    case 2: PacketTimeStampSH = (java.lang.Long)value$; break;
    case 3: TradeTime = (java.lang.Long)value$; break;
    case 4: RecID = (java.lang.Long)value$; break;
    case 5: TradeChannelSH = (java.lang.Integer)value$; break;
    case 6: Symbol = (java.lang.CharSequence)value$; break;
    case 7: TradePrice = (java.lang.Double)value$; break;
    case 8: TradeVolume = (java.lang.Double)value$; break;
    case 9: TradeAmount = (java.lang.Double)value$; break;
    case 10: BuyID = (java.lang.Long)value$; break;
    case 11: SellID = (java.lang.Long)value$; break;
    case 12: BuySellFlagSH = (java.lang.CharSequence)value$; break;
    case 13: SetIDSZ = (java.lang.Integer)value$; break;
    case 14: SymbolSourceSZ = (java.lang.CharSequence)value$; break;
    case 15: TradeTypeSZ = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'LocalTimeStamp' field.
   * @return The value of the 'LocalTimeStamp' field.
   */
  public java.lang.Integer getLocalTimeStamp() {
    return LocalTimeStamp;
  }

  /**
   * Sets the value of the 'LocalTimeStamp' field.
   * @param value the value to set.
   */
  public void setLocalTimeStamp(java.lang.Integer value) {
    this.LocalTimeStamp = value;
  }

  /**
   * Gets the value of the 'QuotationFlag' field.
   * @return The value of the 'QuotationFlag' field.
   */
  public java.lang.CharSequence getQuotationFlag() {
    return QuotationFlag;
  }

  /**
   * Sets the value of the 'QuotationFlag' field.
   * @param value the value to set.
   */
  public void setQuotationFlag(java.lang.CharSequence value) {
    this.QuotationFlag = value;
  }

  /**
   * Gets the value of the 'PacketTimeStampSH' field.
   * @return The value of the 'PacketTimeStampSH' field.
   */
  public java.lang.Long getPacketTimeStampSH() {
    return PacketTimeStampSH;
  }

  /**
   * Sets the value of the 'PacketTimeStampSH' field.
   * @param value the value to set.
   */
  public void setPacketTimeStampSH(java.lang.Long value) {
    this.PacketTimeStampSH = value;
  }

  /**
   * Gets the value of the 'TradeTime' field.
   * @return The value of the 'TradeTime' field.
   */
  public java.lang.Long getTradeTime() {
    return TradeTime;
  }

  /**
   * Sets the value of the 'TradeTime' field.
   * @param value the value to set.
   */
  public void setTradeTime(java.lang.Long value) {
    this.TradeTime = value;
  }

  /**
   * Gets the value of the 'RecID' field.
   * @return The value of the 'RecID' field.
   */
  public java.lang.Long getRecID() {
    return RecID;
  }

  /**
   * Sets the value of the 'RecID' field.
   * @param value the value to set.
   */
  public void setRecID(java.lang.Long value) {
    this.RecID = value;
  }

  /**
   * Gets the value of the 'TradeChannelSH' field.
   * @return The value of the 'TradeChannelSH' field.
   */
  public java.lang.Integer getTradeChannelSH() {
    return TradeChannelSH;
  }

  /**
   * Sets the value of the 'TradeChannelSH' field.
   * @param value the value to set.
   */
  public void setTradeChannelSH(java.lang.Integer value) {
    this.TradeChannelSH = value;
  }

  /**
   * Gets the value of the 'Symbol' field.
   * @return The value of the 'Symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return Symbol;
  }

  /**
   * Sets the value of the 'Symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'TradePrice' field.
   * @return The value of the 'TradePrice' field.
   */
  public java.lang.Double getTradePrice() {
    return TradePrice;
  }

  /**
   * Sets the value of the 'TradePrice' field.
   * @param value the value to set.
   */
  public void setTradePrice(java.lang.Double value) {
    this.TradePrice = value;
  }

  /**
   * Gets the value of the 'TradeVolume' field.
   * @return The value of the 'TradeVolume' field.
   */
  public java.lang.Double getTradeVolume() {
    return TradeVolume;
  }

  /**
   * Sets the value of the 'TradeVolume' field.
   * @param value the value to set.
   */
  public void setTradeVolume(java.lang.Double value) {
    this.TradeVolume = value;
  }

  /**
   * Gets the value of the 'TradeAmount' field.
   * @return The value of the 'TradeAmount' field.
   */
  public java.lang.Double getTradeAmount() {
    return TradeAmount;
  }

  /**
   * Sets the value of the 'TradeAmount' field.
   * @param value the value to set.
   */
  public void setTradeAmount(java.lang.Double value) {
    this.TradeAmount = value;
  }

  /**
   * Gets the value of the 'BuyID' field.
   * @return The value of the 'BuyID' field.
   */
  public java.lang.Long getBuyID() {
    return BuyID;
  }

  /**
   * Sets the value of the 'BuyID' field.
   * @param value the value to set.
   */
  public void setBuyID(java.lang.Long value) {
    this.BuyID = value;
  }

  /**
   * Gets the value of the 'SellID' field.
   * @return The value of the 'SellID' field.
   */
  public java.lang.Long getSellID() {
    return SellID;
  }

  /**
   * Sets the value of the 'SellID' field.
   * @param value the value to set.
   */
  public void setSellID(java.lang.Long value) {
    this.SellID = value;
  }

  /**
   * Gets the value of the 'BuySellFlagSH' field.
   * @return The value of the 'BuySellFlagSH' field.
   */
  public java.lang.CharSequence getBuySellFlagSH() {
    return BuySellFlagSH;
  }

  /**
   * Sets the value of the 'BuySellFlagSH' field.
   * @param value the value to set.
   */
  public void setBuySellFlagSH(java.lang.CharSequence value) {
    this.BuySellFlagSH = value;
  }

  /**
   * Gets the value of the 'SetIDSZ' field.
   * @return The value of the 'SetIDSZ' field.
   */
  public java.lang.Integer getSetIDSZ() {
    return SetIDSZ;
  }

  /**
   * Sets the value of the 'SetIDSZ' field.
   * @param value the value to set.
   */
  public void setSetIDSZ(java.lang.Integer value) {
    this.SetIDSZ = value;
  }

  /**
   * Gets the value of the 'SymbolSourceSZ' field.
   * @return The value of the 'SymbolSourceSZ' field.
   */
  public java.lang.CharSequence getSymbolSourceSZ() {
    return SymbolSourceSZ;
  }

  /**
   * Sets the value of the 'SymbolSourceSZ' field.
   * @param value the value to set.
   */
  public void setSymbolSourceSZ(java.lang.CharSequence value) {
    this.SymbolSourceSZ = value;
  }

  /**
   * Gets the value of the 'TradeTypeSZ' field.
   * @return The value of the 'TradeTypeSZ' field.
   */
  public java.lang.CharSequence getTradeTypeSZ() {
    return TradeTypeSZ;
  }

  /**
   * Sets the value of the 'TradeTypeSZ' field.
   * @param value the value to set.
   */
  public void setTradeTypeSZ(java.lang.CharSequence value) {
    this.TradeTypeSZ = value;
  }

  /**
   * Creates a new Transactions RecordBuilder.
   * @return A new Transactions RecordBuilder
   */
  public static wangzitian.realtime.Transactions.Builder newBuilder() {
    return new wangzitian.realtime.Transactions.Builder();
  }

  /**
   * Creates a new Transactions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transactions RecordBuilder
   */
  public static wangzitian.realtime.Transactions.Builder newBuilder(wangzitian.realtime.Transactions.Builder other) {
    return new wangzitian.realtime.Transactions.Builder(other);
  }

  /**
   * Creates a new Transactions RecordBuilder by copying an existing Transactions instance.
   * @param other The existing instance to copy.
   * @return A new Transactions RecordBuilder
   */
  public static wangzitian.realtime.Transactions.Builder newBuilder(wangzitian.realtime.Transactions other) {
    return new wangzitian.realtime.Transactions.Builder(other);
  }

  /**
   * RecordBuilder for Transactions instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transactions>
    implements org.apache.avro.data.RecordBuilder<Transactions> {

    private int LocalTimeStamp;
    private java.lang.CharSequence QuotationFlag;
    private java.lang.Long PacketTimeStampSH;
    private long TradeTime;
    private long RecID;
    private java.lang.Integer TradeChannelSH;
    private java.lang.CharSequence Symbol;
    private double TradePrice;
    private double TradeVolume;
    private double TradeAmount;
    private long BuyID;
    private long SellID;
    private java.lang.CharSequence BuySellFlagSH;
    private java.lang.Integer SetIDSZ;
    private java.lang.CharSequence SymbolSourceSZ;
    private java.lang.CharSequence TradeTypeSZ;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(wangzitian.realtime.Transactions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.LocalTimeStamp)) {
        this.LocalTimeStamp = data().deepCopy(fields()[0].schema(), other.LocalTimeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.QuotationFlag)) {
        this.QuotationFlag = data().deepCopy(fields()[1].schema(), other.QuotationFlag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PacketTimeStampSH)) {
        this.PacketTimeStampSH = data().deepCopy(fields()[2].schema(), other.PacketTimeStampSH);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TradeTime)) {
        this.TradeTime = data().deepCopy(fields()[3].schema(), other.TradeTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.RecID)) {
        this.RecID = data().deepCopy(fields()[4].schema(), other.RecID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TradeChannelSH)) {
        this.TradeChannelSH = data().deepCopy(fields()[5].schema(), other.TradeChannelSH);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[6].schema(), other.Symbol);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.TradePrice)) {
        this.TradePrice = data().deepCopy(fields()[7].schema(), other.TradePrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.TradeVolume)) {
        this.TradeVolume = data().deepCopy(fields()[8].schema(), other.TradeVolume);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.TradeAmount)) {
        this.TradeAmount = data().deepCopy(fields()[9].schema(), other.TradeAmount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.BuyID)) {
        this.BuyID = data().deepCopy(fields()[10].schema(), other.BuyID);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.SellID)) {
        this.SellID = data().deepCopy(fields()[11].schema(), other.SellID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.BuySellFlagSH)) {
        this.BuySellFlagSH = data().deepCopy(fields()[12].schema(), other.BuySellFlagSH);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.SetIDSZ)) {
        this.SetIDSZ = data().deepCopy(fields()[13].schema(), other.SetIDSZ);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.SymbolSourceSZ)) {
        this.SymbolSourceSZ = data().deepCopy(fields()[14].schema(), other.SymbolSourceSZ);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.TradeTypeSZ)) {
        this.TradeTypeSZ = data().deepCopy(fields()[15].schema(), other.TradeTypeSZ);
        fieldSetFlags()[15] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Transactions instance
     * @param other The existing instance to copy.
     */
    private Builder(wangzitian.realtime.Transactions other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.LocalTimeStamp)) {
        this.LocalTimeStamp = data().deepCopy(fields()[0].schema(), other.LocalTimeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.QuotationFlag)) {
        this.QuotationFlag = data().deepCopy(fields()[1].schema(), other.QuotationFlag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PacketTimeStampSH)) {
        this.PacketTimeStampSH = data().deepCopy(fields()[2].schema(), other.PacketTimeStampSH);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TradeTime)) {
        this.TradeTime = data().deepCopy(fields()[3].schema(), other.TradeTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.RecID)) {
        this.RecID = data().deepCopy(fields()[4].schema(), other.RecID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TradeChannelSH)) {
        this.TradeChannelSH = data().deepCopy(fields()[5].schema(), other.TradeChannelSH);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[6].schema(), other.Symbol);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.TradePrice)) {
        this.TradePrice = data().deepCopy(fields()[7].schema(), other.TradePrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.TradeVolume)) {
        this.TradeVolume = data().deepCopy(fields()[8].schema(), other.TradeVolume);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.TradeAmount)) {
        this.TradeAmount = data().deepCopy(fields()[9].schema(), other.TradeAmount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.BuyID)) {
        this.BuyID = data().deepCopy(fields()[10].schema(), other.BuyID);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.SellID)) {
        this.SellID = data().deepCopy(fields()[11].schema(), other.SellID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.BuySellFlagSH)) {
        this.BuySellFlagSH = data().deepCopy(fields()[12].schema(), other.BuySellFlagSH);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.SetIDSZ)) {
        this.SetIDSZ = data().deepCopy(fields()[13].schema(), other.SetIDSZ);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.SymbolSourceSZ)) {
        this.SymbolSourceSZ = data().deepCopy(fields()[14].schema(), other.SymbolSourceSZ);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.TradeTypeSZ)) {
        this.TradeTypeSZ = data().deepCopy(fields()[15].schema(), other.TradeTypeSZ);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'LocalTimeStamp' field.
      * @return The value.
      */
    public java.lang.Integer getLocalTimeStamp() {
      return LocalTimeStamp;
    }

    /**
      * Sets the value of the 'LocalTimeStamp' field.
      * @param value The value of 'LocalTimeStamp'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setLocalTimeStamp(int value) {
      validate(fields()[0], value);
      this.LocalTimeStamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'LocalTimeStamp' field has been set.
      * @return True if the 'LocalTimeStamp' field has been set, false otherwise.
      */
    public boolean hasLocalTimeStamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'LocalTimeStamp' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearLocalTimeStamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'QuotationFlag' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuotationFlag() {
      return QuotationFlag;
    }

    /**
      * Sets the value of the 'QuotationFlag' field.
      * @param value The value of 'QuotationFlag'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setQuotationFlag(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.QuotationFlag = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'QuotationFlag' field has been set.
      * @return True if the 'QuotationFlag' field has been set, false otherwise.
      */
    public boolean hasQuotationFlag() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'QuotationFlag' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearQuotationFlag() {
      QuotationFlag = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'PacketTimeStampSH' field.
      * @return The value.
      */
    public java.lang.Long getPacketTimeStampSH() {
      return PacketTimeStampSH;
    }

    /**
      * Sets the value of the 'PacketTimeStampSH' field.
      * @param value The value of 'PacketTimeStampSH'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setPacketTimeStampSH(java.lang.Long value) {
      validate(fields()[2], value);
      this.PacketTimeStampSH = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'PacketTimeStampSH' field has been set.
      * @return True if the 'PacketTimeStampSH' field has been set, false otherwise.
      */
    public boolean hasPacketTimeStampSH() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'PacketTimeStampSH' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearPacketTimeStampSH() {
      PacketTimeStampSH = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradeTime' field.
      * @return The value.
      */
    public java.lang.Long getTradeTime() {
      return TradeTime;
    }

    /**
      * Sets the value of the 'TradeTime' field.
      * @param value The value of 'TradeTime'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setTradeTime(long value) {
      validate(fields()[3], value);
      this.TradeTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'TradeTime' field has been set.
      * @return True if the 'TradeTime' field has been set, false otherwise.
      */
    public boolean hasTradeTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'TradeTime' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearTradeTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'RecID' field.
      * @return The value.
      */
    public java.lang.Long getRecID() {
      return RecID;
    }

    /**
      * Sets the value of the 'RecID' field.
      * @param value The value of 'RecID'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setRecID(long value) {
      validate(fields()[4], value);
      this.RecID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'RecID' field has been set.
      * @return True if the 'RecID' field has been set, false otherwise.
      */
    public boolean hasRecID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'RecID' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearRecID() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradeChannelSH' field.
      * @return The value.
      */
    public java.lang.Integer getTradeChannelSH() {
      return TradeChannelSH;
    }

    /**
      * Sets the value of the 'TradeChannelSH' field.
      * @param value The value of 'TradeChannelSH'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setTradeChannelSH(java.lang.Integer value) {
      validate(fields()[5], value);
      this.TradeChannelSH = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'TradeChannelSH' field has been set.
      * @return True if the 'TradeChannelSH' field has been set, false otherwise.
      */
    public boolean hasTradeChannelSH() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'TradeChannelSH' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearTradeChannelSH() {
      TradeChannelSH = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return Symbol;
    }

    /**
      * Sets the value of the 'Symbol' field.
      * @param value The value of 'Symbol'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.Symbol = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Symbol' field has been set.
      * @return True if the 'Symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Symbol' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradePrice' field.
      * @return The value.
      */
    public java.lang.Double getTradePrice() {
      return TradePrice;
    }

    /**
      * Sets the value of the 'TradePrice' field.
      * @param value The value of 'TradePrice'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setTradePrice(double value) {
      validate(fields()[7], value);
      this.TradePrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'TradePrice' field has been set.
      * @return True if the 'TradePrice' field has been set, false otherwise.
      */
    public boolean hasTradePrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'TradePrice' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearTradePrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradeVolume' field.
      * @return The value.
      */
    public java.lang.Double getTradeVolume() {
      return TradeVolume;
    }

    /**
      * Sets the value of the 'TradeVolume' field.
      * @param value The value of 'TradeVolume'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setTradeVolume(double value) {
      validate(fields()[8], value);
      this.TradeVolume = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'TradeVolume' field has been set.
      * @return True if the 'TradeVolume' field has been set, false otherwise.
      */
    public boolean hasTradeVolume() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'TradeVolume' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearTradeVolume() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradeAmount' field.
      * @return The value.
      */
    public java.lang.Double getTradeAmount() {
      return TradeAmount;
    }

    /**
      * Sets the value of the 'TradeAmount' field.
      * @param value The value of 'TradeAmount'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setTradeAmount(double value) {
      validate(fields()[9], value);
      this.TradeAmount = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'TradeAmount' field has been set.
      * @return True if the 'TradeAmount' field has been set, false otherwise.
      */
    public boolean hasTradeAmount() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'TradeAmount' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearTradeAmount() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'BuyID' field.
      * @return The value.
      */
    public java.lang.Long getBuyID() {
      return BuyID;
    }

    /**
      * Sets the value of the 'BuyID' field.
      * @param value The value of 'BuyID'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setBuyID(long value) {
      validate(fields()[10], value);
      this.BuyID = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'BuyID' field has been set.
      * @return True if the 'BuyID' field has been set, false otherwise.
      */
    public boolean hasBuyID() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'BuyID' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearBuyID() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'SellID' field.
      * @return The value.
      */
    public java.lang.Long getSellID() {
      return SellID;
    }

    /**
      * Sets the value of the 'SellID' field.
      * @param value The value of 'SellID'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setSellID(long value) {
      validate(fields()[11], value);
      this.SellID = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'SellID' field has been set.
      * @return True if the 'SellID' field has been set, false otherwise.
      */
    public boolean hasSellID() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'SellID' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearSellID() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'BuySellFlagSH' field.
      * @return The value.
      */
    public java.lang.CharSequence getBuySellFlagSH() {
      return BuySellFlagSH;
    }

    /**
      * Sets the value of the 'BuySellFlagSH' field.
      * @param value The value of 'BuySellFlagSH'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setBuySellFlagSH(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.BuySellFlagSH = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'BuySellFlagSH' field has been set.
      * @return True if the 'BuySellFlagSH' field has been set, false otherwise.
      */
    public boolean hasBuySellFlagSH() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'BuySellFlagSH' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearBuySellFlagSH() {
      BuySellFlagSH = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'SetIDSZ' field.
      * @return The value.
      */
    public java.lang.Integer getSetIDSZ() {
      return SetIDSZ;
    }

    /**
      * Sets the value of the 'SetIDSZ' field.
      * @param value The value of 'SetIDSZ'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setSetIDSZ(java.lang.Integer value) {
      validate(fields()[13], value);
      this.SetIDSZ = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'SetIDSZ' field has been set.
      * @return True if the 'SetIDSZ' field has been set, false otherwise.
      */
    public boolean hasSetIDSZ() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'SetIDSZ' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearSetIDSZ() {
      SetIDSZ = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'SymbolSourceSZ' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbolSourceSZ() {
      return SymbolSourceSZ;
    }

    /**
      * Sets the value of the 'SymbolSourceSZ' field.
      * @param value The value of 'SymbolSourceSZ'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setSymbolSourceSZ(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.SymbolSourceSZ = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'SymbolSourceSZ' field has been set.
      * @return True if the 'SymbolSourceSZ' field has been set, false otherwise.
      */
    public boolean hasSymbolSourceSZ() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'SymbolSourceSZ' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearSymbolSourceSZ() {
      SymbolSourceSZ = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradeTypeSZ' field.
      * @return The value.
      */
    public java.lang.CharSequence getTradeTypeSZ() {
      return TradeTypeSZ;
    }

    /**
      * Sets the value of the 'TradeTypeSZ' field.
      * @param value The value of 'TradeTypeSZ'.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder setTradeTypeSZ(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.TradeTypeSZ = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'TradeTypeSZ' field has been set.
      * @return True if the 'TradeTypeSZ' field has been set, false otherwise.
      */
    public boolean hasTradeTypeSZ() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'TradeTypeSZ' field.
      * @return This builder.
      */
    public wangzitian.realtime.Transactions.Builder clearTradeTypeSZ() {
      TradeTypeSZ = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transactions build() {
      try {
        Transactions record = new Transactions();
        record.LocalTimeStamp = fieldSetFlags()[0] ? this.LocalTimeStamp : (java.lang.Integer) defaultValue(fields()[0]);
        record.QuotationFlag = fieldSetFlags()[1] ? this.QuotationFlag : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.PacketTimeStampSH = fieldSetFlags()[2] ? this.PacketTimeStampSH : (java.lang.Long) defaultValue(fields()[2]);
        record.TradeTime = fieldSetFlags()[3] ? this.TradeTime : (java.lang.Long) defaultValue(fields()[3]);
        record.RecID = fieldSetFlags()[4] ? this.RecID : (java.lang.Long) defaultValue(fields()[4]);
        record.TradeChannelSH = fieldSetFlags()[5] ? this.TradeChannelSH : (java.lang.Integer) defaultValue(fields()[5]);
        record.Symbol = fieldSetFlags()[6] ? this.Symbol : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.TradePrice = fieldSetFlags()[7] ? this.TradePrice : (java.lang.Double) defaultValue(fields()[7]);
        record.TradeVolume = fieldSetFlags()[8] ? this.TradeVolume : (java.lang.Double) defaultValue(fields()[8]);
        record.TradeAmount = fieldSetFlags()[9] ? this.TradeAmount : (java.lang.Double) defaultValue(fields()[9]);
        record.BuyID = fieldSetFlags()[10] ? this.BuyID : (java.lang.Long) defaultValue(fields()[10]);
        record.SellID = fieldSetFlags()[11] ? this.SellID : (java.lang.Long) defaultValue(fields()[11]);
        record.BuySellFlagSH = fieldSetFlags()[12] ? this.BuySellFlagSH : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.SetIDSZ = fieldSetFlags()[13] ? this.SetIDSZ : (java.lang.Integer) defaultValue(fields()[13]);
        record.SymbolSourceSZ = fieldSetFlags()[14] ? this.SymbolSourceSZ : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.TradeTypeSZ = fieldSetFlags()[15] ? this.TradeTypeSZ : (java.lang.CharSequence) defaultValue(fields()[15]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transactions>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transactions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transactions>
    READER$ = (org.apache.avro.io.DatumReader<Transactions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
