/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package wangzitian.realtime;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SignalRange0 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3245066533317583620L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SignalRange0\",\"namespace\":\"wangzitian.realtime\",\"fields\":[{\"name\":\"Indicator\",\"type\":[\"string\",\"null\"]},{\"name\":\"tick\",\"type\":\"long\"},{\"name\":\"low_in\",\"type\":\"double\"},{\"name\":\"middle_in\",\"type\":\"double\"},{\"name\":\"big_in\",\"type\":\"double\"},{\"name\":\"subig_in\",\"type\":\"double\"},{\"name\":\"exbig_in\",\"type\":\"double\"},{\"name\":\"low_out\",\"type\":\"double\"},{\"name\":\"middle_out\",\"type\":\"double\"},{\"name\":\"big_out\",\"type\":\"double\"},{\"name\":\"subig_out\",\"type\":\"double\"},{\"name\":\"exbig_out\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SignalRange0> ENCODER =
      new BinaryMessageEncoder<SignalRange0>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SignalRange0> DECODER =
      new BinaryMessageDecoder<SignalRange0>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SignalRange0> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SignalRange0> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SignalRange0>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SignalRange0 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SignalRange0 from a ByteBuffer. */
  public static SignalRange0 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence Indicator;
  @Deprecated public long tick;
  @Deprecated public double low_in;
  @Deprecated public double middle_in;
  @Deprecated public double big_in;
  @Deprecated public double subig_in;
  @Deprecated public double exbig_in;
  @Deprecated public double low_out;
  @Deprecated public double middle_out;
  @Deprecated public double big_out;
  @Deprecated public double subig_out;
  @Deprecated public double exbig_out;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SignalRange0() {}

  /**
   * All-args constructor.
   * @param Indicator The new value for Indicator
   * @param tick The new value for tick
   * @param low_in The new value for low_in
   * @param middle_in The new value for middle_in
   * @param big_in The new value for big_in
   * @param subig_in The new value for subig_in
   * @param exbig_in The new value for exbig_in
   * @param low_out The new value for low_out
   * @param middle_out The new value for middle_out
   * @param big_out The new value for big_out
   * @param subig_out The new value for subig_out
   * @param exbig_out The new value for exbig_out
   */
  public SignalRange0(CharSequence Indicator, Long tick, Double low_in, Double middle_in, Double big_in, Double subig_in, Double exbig_in, Double low_out, Double middle_out, Double big_out, Double subig_out, Double exbig_out) {
    this.Indicator = Indicator;
    this.tick = tick;
    this.low_in = low_in;
    this.middle_in = middle_in;
    this.big_in = big_in;
    this.subig_in = subig_in;
    this.exbig_in = exbig_in;
    this.low_out = low_out;
    this.middle_out = middle_out;
    this.big_out = big_out;
    this.subig_out = subig_out;
    this.exbig_out = exbig_out;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return Indicator;
    case 1: return tick;
    case 2: return low_in;
    case 3: return middle_in;
    case 4: return big_in;
    case 5: return subig_in;
    case 6: return exbig_in;
    case 7: return low_out;
    case 8: return middle_out;
    case 9: return big_out;
    case 10: return subig_out;
    case 11: return exbig_out;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: Indicator = (CharSequence)value$; break;
    case 1: tick = (Long)value$; break;
    case 2: low_in = (Double)value$; break;
    case 3: middle_in = (Double)value$; break;
    case 4: big_in = (Double)value$; break;
    case 5: subig_in = (Double)value$; break;
    case 6: exbig_in = (Double)value$; break;
    case 7: low_out = (Double)value$; break;
    case 8: middle_out = (Double)value$; break;
    case 9: big_out = (Double)value$; break;
    case 10: subig_out = (Double)value$; break;
    case 11: exbig_out = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Indicator' field.
   * @return The value of the 'Indicator' field.
   */
  public CharSequence getIndicator() {
    return Indicator;
  }

  /**
   * Sets the value of the 'Indicator' field.
   * @param value the value to set.
   */
  public void setIndicator(CharSequence value) {
    this.Indicator = value;
  }

  /**
   * Gets the value of the 'tick' field.
   * @return The value of the 'tick' field.
   */
  public Long getTick() {
    return tick;
  }

  /**
   * Sets the value of the 'tick' field.
   * @param value the value to set.
   */
  public void setTick(Long value) {
    this.tick = value;
  }

  /**
   * Gets the value of the 'low_in' field.
   * @return The value of the 'low_in' field.
   */
  public Double getLowIn() {
    return low_in;
  }

  /**
   * Sets the value of the 'low_in' field.
   * @param value the value to set.
   */
  public void setLowIn(Double value) {
    this.low_in = value;
  }

  /**
   * Gets the value of the 'middle_in' field.
   * @return The value of the 'middle_in' field.
   */
  public Double getMiddleIn() {
    return middle_in;
  }

  /**
   * Sets the value of the 'middle_in' field.
   * @param value the value to set.
   */
  public void setMiddleIn(Double value) {
    this.middle_in = value;
  }

  /**
   * Gets the value of the 'big_in' field.
   * @return The value of the 'big_in' field.
   */
  public Double getBigIn() {
    return big_in;
  }

  /**
   * Sets the value of the 'big_in' field.
   * @param value the value to set.
   */
  public void setBigIn(Double value) {
    this.big_in = value;
  }

  /**
   * Gets the value of the 'subig_in' field.
   * @return The value of the 'subig_in' field.
   */
  public Double getSubigIn() {
    return subig_in;
  }

  /**
   * Sets the value of the 'subig_in' field.
   * @param value the value to set.
   */
  public void setSubigIn(Double value) {
    this.subig_in = value;
  }

  /**
   * Gets the value of the 'exbig_in' field.
   * @return The value of the 'exbig_in' field.
   */
  public Double getExbigIn() {
    return exbig_in;
  }

  /**
   * Sets the value of the 'exbig_in' field.
   * @param value the value to set.
   */
  public void setExbigIn(Double value) {
    this.exbig_in = value;
  }

  /**
   * Gets the value of the 'low_out' field.
   * @return The value of the 'low_out' field.
   */
  public Double getLowOut() {
    return low_out;
  }

  /**
   * Sets the value of the 'low_out' field.
   * @param value the value to set.
   */
  public void setLowOut(Double value) {
    this.low_out = value;
  }

  /**
   * Gets the value of the 'middle_out' field.
   * @return The value of the 'middle_out' field.
   */
  public Double getMiddleOut() {
    return middle_out;
  }

  /**
   * Sets the value of the 'middle_out' field.
   * @param value the value to set.
   */
  public void setMiddleOut(Double value) {
    this.middle_out = value;
  }

  /**
   * Gets the value of the 'big_out' field.
   * @return The value of the 'big_out' field.
   */
  public Double getBigOut() {
    return big_out;
  }

  /**
   * Sets the value of the 'big_out' field.
   * @param value the value to set.
   */
  public void setBigOut(Double value) {
    this.big_out = value;
  }

  /**
   * Gets the value of the 'subig_out' field.
   * @return The value of the 'subig_out' field.
   */
  public Double getSubigOut() {
    return subig_out;
  }

  /**
   * Sets the value of the 'subig_out' field.
   * @param value the value to set.
   */
  public void setSubigOut(Double value) {
    this.subig_out = value;
  }

  /**
   * Gets the value of the 'exbig_out' field.
   * @return The value of the 'exbig_out' field.
   */
  public Double getExbigOut() {
    return exbig_out;
  }

  /**
   * Sets the value of the 'exbig_out' field.
   * @param value the value to set.
   */
  public void setExbigOut(Double value) {
    this.exbig_out = value;
  }

  /**
   * Creates a new SignalRange0 RecordBuilder.
   * @return A new SignalRange0 RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new SignalRange0 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SignalRange0 RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new SignalRange0 RecordBuilder by copying an existing SignalRange0 instance.
   * @param other The existing instance to copy.
   * @return A new SignalRange0 RecordBuilder
   */
  public static Builder newBuilder(SignalRange0 other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for SignalRange0 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SignalRange0>
    implements org.apache.avro.data.RecordBuilder<SignalRange0> {

    private CharSequence Indicator;
    private long tick;
    private double low_in;
    private double middle_in;
    private double big_in;
    private double subig_in;
    private double exbig_in;
    private double low_out;
    private double middle_out;
    private double big_out;
    private double subig_out;
    private double exbig_out;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Indicator)) {
        this.Indicator = data().deepCopy(fields()[0].schema(), other.Indicator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tick)) {
        this.tick = data().deepCopy(fields()[1].schema(), other.tick);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.low_in)) {
        this.low_in = data().deepCopy(fields()[2].schema(), other.low_in);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.middle_in)) {
        this.middle_in = data().deepCopy(fields()[3].schema(), other.middle_in);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.big_in)) {
        this.big_in = data().deepCopy(fields()[4].schema(), other.big_in);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subig_in)) {
        this.subig_in = data().deepCopy(fields()[5].schema(), other.subig_in);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exbig_in)) {
        this.exbig_in = data().deepCopy(fields()[6].schema(), other.exbig_in);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.low_out)) {
        this.low_out = data().deepCopy(fields()[7].schema(), other.low_out);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.middle_out)) {
        this.middle_out = data().deepCopy(fields()[8].schema(), other.middle_out);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.big_out)) {
        this.big_out = data().deepCopy(fields()[9].schema(), other.big_out);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.subig_out)) {
        this.subig_out = data().deepCopy(fields()[10].schema(), other.subig_out);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.exbig_out)) {
        this.exbig_out = data().deepCopy(fields()[11].schema(), other.exbig_out);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SignalRange0 instance
     * @param other The existing instance to copy.
     */
    private Builder(SignalRange0 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Indicator)) {
        this.Indicator = data().deepCopy(fields()[0].schema(), other.Indicator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tick)) {
        this.tick = data().deepCopy(fields()[1].schema(), other.tick);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.low_in)) {
        this.low_in = data().deepCopy(fields()[2].schema(), other.low_in);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.middle_in)) {
        this.middle_in = data().deepCopy(fields()[3].schema(), other.middle_in);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.big_in)) {
        this.big_in = data().deepCopy(fields()[4].schema(), other.big_in);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subig_in)) {
        this.subig_in = data().deepCopy(fields()[5].schema(), other.subig_in);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exbig_in)) {
        this.exbig_in = data().deepCopy(fields()[6].schema(), other.exbig_in);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.low_out)) {
        this.low_out = data().deepCopy(fields()[7].schema(), other.low_out);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.middle_out)) {
        this.middle_out = data().deepCopy(fields()[8].schema(), other.middle_out);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.big_out)) {
        this.big_out = data().deepCopy(fields()[9].schema(), other.big_out);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.subig_out)) {
        this.subig_out = data().deepCopy(fields()[10].schema(), other.subig_out);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.exbig_out)) {
        this.exbig_out = data().deepCopy(fields()[11].schema(), other.exbig_out);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'Indicator' field.
      * @return The value.
      */
    public CharSequence getIndicator() {
      return Indicator;
    }

    /**
      * Sets the value of the 'Indicator' field.
      * @param value The value of 'Indicator'.
      * @return This builder.
      */
    public Builder setIndicator(CharSequence value) {
      validate(fields()[0], value);
      this.Indicator = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Indicator' field has been set.
      * @return True if the 'Indicator' field has been set, false otherwise.
      */
    public boolean hasIndicator() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Indicator' field.
      * @return This builder.
      */
    public Builder clearIndicator() {
      Indicator = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tick' field.
      * @return The value.
      */
    public Long getTick() {
      return tick;
    }

    /**
      * Sets the value of the 'tick' field.
      * @param value The value of 'tick'.
      * @return This builder.
      */
    public Builder setTick(long value) {
      validate(fields()[1], value);
      this.tick = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tick' field has been set.
      * @return True if the 'tick' field has been set, false otherwise.
      */
    public boolean hasTick() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tick' field.
      * @return This builder.
      */
    public Builder clearTick() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'low_in' field.
      * @return The value.
      */
    public Double getLowIn() {
      return low_in;
    }

    /**
      * Sets the value of the 'low_in' field.
      * @param value The value of 'low_in'.
      * @return This builder.
      */
    public Builder setLowIn(double value) {
      validate(fields()[2], value);
      this.low_in = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'low_in' field has been set.
      * @return True if the 'low_in' field has been set, false otherwise.
      */
    public boolean hasLowIn() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'low_in' field.
      * @return This builder.
      */
    public Builder clearLowIn() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'middle_in' field.
      * @return The value.
      */
    public Double getMiddleIn() {
      return middle_in;
    }

    /**
      * Sets the value of the 'middle_in' field.
      * @param value The value of 'middle_in'.
      * @return This builder.
      */
    public Builder setMiddleIn(double value) {
      validate(fields()[3], value);
      this.middle_in = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'middle_in' field has been set.
      * @return True if the 'middle_in' field has been set, false otherwise.
      */
    public boolean hasMiddleIn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'middle_in' field.
      * @return This builder.
      */
    public Builder clearMiddleIn() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'big_in' field.
      * @return The value.
      */
    public Double getBigIn() {
      return big_in;
    }

    /**
      * Sets the value of the 'big_in' field.
      * @param value The value of 'big_in'.
      * @return This builder.
      */
    public Builder setBigIn(double value) {
      validate(fields()[4], value);
      this.big_in = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'big_in' field has been set.
      * @return True if the 'big_in' field has been set, false otherwise.
      */
    public boolean hasBigIn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'big_in' field.
      * @return This builder.
      */
    public Builder clearBigIn() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subig_in' field.
      * @return The value.
      */
    public Double getSubigIn() {
      return subig_in;
    }

    /**
      * Sets the value of the 'subig_in' field.
      * @param value The value of 'subig_in'.
      * @return This builder.
      */
    public Builder setSubigIn(double value) {
      validate(fields()[5], value);
      this.subig_in = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subig_in' field has been set.
      * @return True if the 'subig_in' field has been set, false otherwise.
      */
    public boolean hasSubigIn() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'subig_in' field.
      * @return This builder.
      */
    public Builder clearSubigIn() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'exbig_in' field.
      * @return The value.
      */
    public Double getExbigIn() {
      return exbig_in;
    }

    /**
      * Sets the value of the 'exbig_in' field.
      * @param value The value of 'exbig_in'.
      * @return This builder.
      */
    public Builder setExbigIn(double value) {
      validate(fields()[6], value);
      this.exbig_in = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'exbig_in' field has been set.
      * @return True if the 'exbig_in' field has been set, false otherwise.
      */
    public boolean hasExbigIn() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'exbig_in' field.
      * @return This builder.
      */
    public Builder clearExbigIn() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'low_out' field.
      * @return The value.
      */
    public Double getLowOut() {
      return low_out;
    }

    /**
      * Sets the value of the 'low_out' field.
      * @param value The value of 'low_out'.
      * @return This builder.
      */
    public Builder setLowOut(double value) {
      validate(fields()[7], value);
      this.low_out = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'low_out' field has been set.
      * @return True if the 'low_out' field has been set, false otherwise.
      */
    public boolean hasLowOut() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'low_out' field.
      * @return This builder.
      */
    public Builder clearLowOut() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'middle_out' field.
      * @return The value.
      */
    public Double getMiddleOut() {
      return middle_out;
    }

    /**
      * Sets the value of the 'middle_out' field.
      * @param value The value of 'middle_out'.
      * @return This builder.
      */
    public Builder setMiddleOut(double value) {
      validate(fields()[8], value);
      this.middle_out = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'middle_out' field has been set.
      * @return True if the 'middle_out' field has been set, false otherwise.
      */
    public boolean hasMiddleOut() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'middle_out' field.
      * @return This builder.
      */
    public Builder clearMiddleOut() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'big_out' field.
      * @return The value.
      */
    public Double getBigOut() {
      return big_out;
    }

    /**
      * Sets the value of the 'big_out' field.
      * @param value The value of 'big_out'.
      * @return This builder.
      */
    public Builder setBigOut(double value) {
      validate(fields()[9], value);
      this.big_out = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'big_out' field has been set.
      * @return True if the 'big_out' field has been set, false otherwise.
      */
    public boolean hasBigOut() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'big_out' field.
      * @return This builder.
      */
    public Builder clearBigOut() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'subig_out' field.
      * @return The value.
      */
    public Double getSubigOut() {
      return subig_out;
    }

    /**
      * Sets the value of the 'subig_out' field.
      * @param value The value of 'subig_out'.
      * @return This builder.
      */
    public Builder setSubigOut(double value) {
      validate(fields()[10], value);
      this.subig_out = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'subig_out' field has been set.
      * @return True if the 'subig_out' field has been set, false otherwise.
      */
    public boolean hasSubigOut() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'subig_out' field.
      * @return This builder.
      */
    public Builder clearSubigOut() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'exbig_out' field.
      * @return The value.
      */
    public Double getExbigOut() {
      return exbig_out;
    }

    /**
      * Sets the value of the 'exbig_out' field.
      * @param value The value of 'exbig_out'.
      * @return This builder.
      */
    public Builder setExbigOut(double value) {
      validate(fields()[11], value);
      this.exbig_out = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'exbig_out' field has been set.
      * @return True if the 'exbig_out' field has been set, false otherwise.
      */
    public boolean hasExbigOut() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'exbig_out' field.
      * @return This builder.
      */
    public Builder clearExbigOut() {
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SignalRange0 build() {
      try {
        SignalRange0 record = new SignalRange0();
        record.Indicator = fieldSetFlags()[0] ? this.Indicator : (CharSequence) defaultValue(fields()[0]);
        record.tick = fieldSetFlags()[1] ? this.tick : (Long) defaultValue(fields()[1]);
        record.low_in = fieldSetFlags()[2] ? this.low_in : (Double) defaultValue(fields()[2]);
        record.middle_in = fieldSetFlags()[3] ? this.middle_in : (Double) defaultValue(fields()[3]);
        record.big_in = fieldSetFlags()[4] ? this.big_in : (Double) defaultValue(fields()[4]);
        record.subig_in = fieldSetFlags()[5] ? this.subig_in : (Double) defaultValue(fields()[5]);
        record.exbig_in = fieldSetFlags()[6] ? this.exbig_in : (Double) defaultValue(fields()[6]);
        record.low_out = fieldSetFlags()[7] ? this.low_out : (Double) defaultValue(fields()[7]);
        record.middle_out = fieldSetFlags()[8] ? this.middle_out : (Double) defaultValue(fields()[8]);
        record.big_out = fieldSetFlags()[9] ? this.big_out : (Double) defaultValue(fields()[9]);
        record.subig_out = fieldSetFlags()[10] ? this.subig_out : (Double) defaultValue(fields()[10]);
        record.exbig_out = fieldSetFlags()[11] ? this.exbig_out : (Double) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SignalRange0>
    WRITER$ = (org.apache.avro.io.DatumWriter<SignalRange0>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SignalRange0>
    READER$ = (org.apache.avro.io.DatumReader<SignalRange0>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
