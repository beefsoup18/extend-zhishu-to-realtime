/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package wangzitian.realtime;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SZorder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7868303655867251444L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SZorder\",\"namespace\":\"wangzitian.realtime\",\"fields\":[{\"name\":\"LocalTimeStamp\",\"type\":\"int\"},{\"name\":\"QuotationFlag\",\"type\":[\"string\",\"null\"]},{\"name\":\"SetID\",\"type\":[\"int\",\"null\"]},{\"name\":\"RecID\",\"type\":\"long\"},{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"SymbolSource\",\"type\":[\"string\",\"null\"]},{\"name\":\"Time\",\"type\":\"long\"},{\"name\":\"OrderPrice\",\"type\":\"double\"},{\"name\":\"OrderVolume\",\"type\":\"double\"},{\"name\":\"OrderCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"OrderType\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SZorder> ENCODER =
      new BinaryMessageEncoder<SZorder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SZorder> DECODER =
      new BinaryMessageDecoder<SZorder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SZorder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SZorder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SZorder>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SZorder to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SZorder from a ByteBuffer. */
  public static SZorder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int LocalTimeStamp;
  @Deprecated public CharSequence QuotationFlag;
  @Deprecated public Integer SetID;
  @Deprecated public long RecID;
  @Deprecated public CharSequence Symbol;
  @Deprecated public CharSequence SymbolSource;
  @Deprecated public long Time;
  @Deprecated public double OrderPrice;
  @Deprecated public double OrderVolume;
  @Deprecated public CharSequence OrderCode;
  @Deprecated public CharSequence OrderType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SZorder() {}

  /**
   * All-args constructor.
   * @param LocalTimeStamp The new value for LocalTimeStamp
   * @param QuotationFlag The new value for QuotationFlag
   * @param SetID The new value for SetID
   * @param RecID The new value for RecID
   * @param Symbol The new value for Symbol
   * @param SymbolSource The new value for SymbolSource
   * @param Time The new value for Time
   * @param OrderPrice The new value for OrderPrice
   * @param OrderVolume The new value for OrderVolume
   * @param OrderCode The new value for OrderCode
   * @param OrderType The new value for OrderType
   */
  public SZorder(Integer LocalTimeStamp, CharSequence QuotationFlag, Integer SetID, Long RecID, CharSequence Symbol, CharSequence SymbolSource, Long Time, Double OrderPrice, Double OrderVolume, CharSequence OrderCode, CharSequence OrderType) {
    this.LocalTimeStamp = LocalTimeStamp;
    this.QuotationFlag = QuotationFlag;
    this.SetID = SetID;
    this.RecID = RecID;
    this.Symbol = Symbol;
    this.SymbolSource = SymbolSource;
    this.Time = Time;
    this.OrderPrice = OrderPrice;
    this.OrderVolume = OrderVolume;
    this.OrderCode = OrderCode;
    this.OrderType = OrderType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return LocalTimeStamp;
    case 1: return QuotationFlag;
    case 2: return SetID;
    case 3: return RecID;
    case 4: return Symbol;
    case 5: return SymbolSource;
    case 6: return Time;
    case 7: return OrderPrice;
    case 8: return OrderVolume;
    case 9: return OrderCode;
    case 10: return OrderType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: LocalTimeStamp = (Integer)value$; break;
    case 1: QuotationFlag = (CharSequence)value$; break;
    case 2: SetID = (Integer)value$; break;
    case 3: RecID = (Long)value$; break;
    case 4: Symbol = (CharSequence)value$; break;
    case 5: SymbolSource = (CharSequence)value$; break;
    case 6: Time = (Long)value$; break;
    case 7: OrderPrice = (Double)value$; break;
    case 8: OrderVolume = (Double)value$; break;
    case 9: OrderCode = (CharSequence)value$; break;
    case 10: OrderType = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'LocalTimeStamp' field.
   * @return The value of the 'LocalTimeStamp' field.
   */
  public Integer getLocalTimeStamp() {
    return LocalTimeStamp;
  }

  /**
   * Sets the value of the 'LocalTimeStamp' field.
   * @param value the value to set.
   */
  public void setLocalTimeStamp(Integer value) {
    this.LocalTimeStamp = value;
  }

  /**
   * Gets the value of the 'QuotationFlag' field.
   * @return The value of the 'QuotationFlag' field.
   */
  public CharSequence getQuotationFlag() {
    return QuotationFlag;
  }

  /**
   * Sets the value of the 'QuotationFlag' field.
   * @param value the value to set.
   */
  public void setQuotationFlag(CharSequence value) {
    this.QuotationFlag = value;
  }

  /**
   * Gets the value of the 'SetID' field.
   * @return The value of the 'SetID' field.
   */
  public Integer getSetID() {
    return SetID;
  }

  /**
   * Sets the value of the 'SetID' field.
   * @param value the value to set.
   */
  public void setSetID(Integer value) {
    this.SetID = value;
  }

  /**
   * Gets the value of the 'RecID' field.
   * @return The value of the 'RecID' field.
   */
  public Long getRecID() {
    return RecID;
  }

  /**
   * Sets the value of the 'RecID' field.
   * @param value the value to set.
   */
  public void setRecID(Long value) {
    this.RecID = value;
  }

  /**
   * Gets the value of the 'Symbol' field.
   * @return The value of the 'Symbol' field.
   */
  public CharSequence getSymbol() {
    return Symbol;
  }

  /**
   * Sets the value of the 'Symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(CharSequence value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'SymbolSource' field.
   * @return The value of the 'SymbolSource' field.
   */
  public CharSequence getSymbolSource() {
    return SymbolSource;
  }

  /**
   * Sets the value of the 'SymbolSource' field.
   * @param value the value to set.
   */
  public void setSymbolSource(CharSequence value) {
    this.SymbolSource = value;
  }

  /**
   * Gets the value of the 'Time' field.
   * @return The value of the 'Time' field.
   */
  public Long getTime() {
    return Time;
  }

  /**
   * Sets the value of the 'Time' field.
   * @param value the value to set.
   */
  public void setTime(Long value) {
    this.Time = value;
  }

  /**
   * Gets the value of the 'OrderPrice' field.
   * @return The value of the 'OrderPrice' field.
   */
  public Double getOrderPrice() {
    return OrderPrice;
  }

  /**
   * Sets the value of the 'OrderPrice' field.
   * @param value the value to set.
   */
  public void setOrderPrice(Double value) {
    this.OrderPrice = value;
  }

  /**
   * Gets the value of the 'OrderVolume' field.
   * @return The value of the 'OrderVolume' field.
   */
  public Double getOrderVolume() {
    return OrderVolume;
  }

  /**
   * Sets the value of the 'OrderVolume' field.
   * @param value the value to set.
   */
  public void setOrderVolume(Double value) {
    this.OrderVolume = value;
  }

  /**
   * Gets the value of the 'OrderCode' field.
   * @return The value of the 'OrderCode' field.
   */
  public CharSequence getOrderCode() {
    return OrderCode;
  }

  /**
   * Sets the value of the 'OrderCode' field.
   * @param value the value to set.
   */
  public void setOrderCode(CharSequence value) {
    this.OrderCode = value;
  }

  /**
   * Gets the value of the 'OrderType' field.
   * @return The value of the 'OrderType' field.
   */
  public CharSequence getOrderType() {
    return OrderType;
  }

  /**
   * Sets the value of the 'OrderType' field.
   * @param value the value to set.
   */
  public void setOrderType(CharSequence value) {
    this.OrderType = value;
  }

  /**
   * Creates a new SZorder RecordBuilder.
   * @return A new SZorder RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new SZorder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SZorder RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new SZorder RecordBuilder by copying an existing SZorder instance.
   * @param other The existing instance to copy.
   * @return A new SZorder RecordBuilder
   */
  public static Builder newBuilder(SZorder other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for SZorder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SZorder>
    implements org.apache.avro.data.RecordBuilder<SZorder> {

    private int LocalTimeStamp;
    private CharSequence QuotationFlag;
    private Integer SetID;
    private long RecID;
    private CharSequence Symbol;
    private CharSequence SymbolSource;
    private long Time;
    private double OrderPrice;
    private double OrderVolume;
    private CharSequence OrderCode;
    private CharSequence OrderType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.LocalTimeStamp)) {
        this.LocalTimeStamp = data().deepCopy(fields()[0].schema(), other.LocalTimeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.QuotationFlag)) {
        this.QuotationFlag = data().deepCopy(fields()[1].schema(), other.QuotationFlag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SetID)) {
        this.SetID = data().deepCopy(fields()[2].schema(), other.SetID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.RecID)) {
        this.RecID = data().deepCopy(fields()[3].schema(), other.RecID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[4].schema(), other.Symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SymbolSource)) {
        this.SymbolSource = data().deepCopy(fields()[5].schema(), other.SymbolSource);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Time)) {
        this.Time = data().deepCopy(fields()[6].schema(), other.Time);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.OrderPrice)) {
        this.OrderPrice = data().deepCopy(fields()[7].schema(), other.OrderPrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.OrderVolume)) {
        this.OrderVolume = data().deepCopy(fields()[8].schema(), other.OrderVolume);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.OrderCode)) {
        this.OrderCode = data().deepCopy(fields()[9].schema(), other.OrderCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.OrderType)) {
        this.OrderType = data().deepCopy(fields()[10].schema(), other.OrderType);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SZorder instance
     * @param other The existing instance to copy.
     */
    private Builder(SZorder other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.LocalTimeStamp)) {
        this.LocalTimeStamp = data().deepCopy(fields()[0].schema(), other.LocalTimeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.QuotationFlag)) {
        this.QuotationFlag = data().deepCopy(fields()[1].schema(), other.QuotationFlag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SetID)) {
        this.SetID = data().deepCopy(fields()[2].schema(), other.SetID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.RecID)) {
        this.RecID = data().deepCopy(fields()[3].schema(), other.RecID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[4].schema(), other.Symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SymbolSource)) {
        this.SymbolSource = data().deepCopy(fields()[5].schema(), other.SymbolSource);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Time)) {
        this.Time = data().deepCopy(fields()[6].schema(), other.Time);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.OrderPrice)) {
        this.OrderPrice = data().deepCopy(fields()[7].schema(), other.OrderPrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.OrderVolume)) {
        this.OrderVolume = data().deepCopy(fields()[8].schema(), other.OrderVolume);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.OrderCode)) {
        this.OrderCode = data().deepCopy(fields()[9].schema(), other.OrderCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.OrderType)) {
        this.OrderType = data().deepCopy(fields()[10].schema(), other.OrderType);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'LocalTimeStamp' field.
      * @return The value.
      */
    public Integer getLocalTimeStamp() {
      return LocalTimeStamp;
    }

    /**
      * Sets the value of the 'LocalTimeStamp' field.
      * @param value The value of 'LocalTimeStamp'.
      * @return This builder.
      */
    public Builder setLocalTimeStamp(int value) {
      validate(fields()[0], value);
      this.LocalTimeStamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'LocalTimeStamp' field has been set.
      * @return True if the 'LocalTimeStamp' field has been set, false otherwise.
      */
    public boolean hasLocalTimeStamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'LocalTimeStamp' field.
      * @return This builder.
      */
    public Builder clearLocalTimeStamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'QuotationFlag' field.
      * @return The value.
      */
    public CharSequence getQuotationFlag() {
      return QuotationFlag;
    }

    /**
      * Sets the value of the 'QuotationFlag' field.
      * @param value The value of 'QuotationFlag'.
      * @return This builder.
      */
    public Builder setQuotationFlag(CharSequence value) {
      validate(fields()[1], value);
      this.QuotationFlag = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'QuotationFlag' field has been set.
      * @return True if the 'QuotationFlag' field has been set, false otherwise.
      */
    public boolean hasQuotationFlag() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'QuotationFlag' field.
      * @return This builder.
      */
    public Builder clearQuotationFlag() {
      QuotationFlag = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'SetID' field.
      * @return The value.
      */
    public Integer getSetID() {
      return SetID;
    }

    /**
      * Sets the value of the 'SetID' field.
      * @param value The value of 'SetID'.
      * @return This builder.
      */
    public Builder setSetID(Integer value) {
      validate(fields()[2], value);
      this.SetID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'SetID' field has been set.
      * @return True if the 'SetID' field has been set, false otherwise.
      */
    public boolean hasSetID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'SetID' field.
      * @return This builder.
      */
    public Builder clearSetID() {
      SetID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'RecID' field.
      * @return The value.
      */
    public Long getRecID() {
      return RecID;
    }

    /**
      * Sets the value of the 'RecID' field.
      * @param value The value of 'RecID'.
      * @return This builder.
      */
    public Builder setRecID(long value) {
      validate(fields()[3], value);
      this.RecID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'RecID' field has been set.
      * @return True if the 'RecID' field has been set, false otherwise.
      */
    public boolean hasRecID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'RecID' field.
      * @return This builder.
      */
    public Builder clearRecID() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Symbol' field.
      * @return The value.
      */
    public CharSequence getSymbol() {
      return Symbol;
    }

    /**
      * Sets the value of the 'Symbol' field.
      * @param value The value of 'Symbol'.
      * @return This builder.
      */
    public Builder setSymbol(CharSequence value) {
      validate(fields()[4], value);
      this.Symbol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Symbol' field has been set.
      * @return True if the 'Symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Symbol' field.
      * @return This builder.
      */
    public Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'SymbolSource' field.
      * @return The value.
      */
    public CharSequence getSymbolSource() {
      return SymbolSource;
    }

    /**
      * Sets the value of the 'SymbolSource' field.
      * @param value The value of 'SymbolSource'.
      * @return This builder.
      */
    public Builder setSymbolSource(CharSequence value) {
      validate(fields()[5], value);
      this.SymbolSource = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'SymbolSource' field has been set.
      * @return True if the 'SymbolSource' field has been set, false otherwise.
      */
    public boolean hasSymbolSource() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'SymbolSource' field.
      * @return This builder.
      */
    public Builder clearSymbolSource() {
      SymbolSource = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Time' field.
      * @return The value.
      */
    public Long getTime() {
      return Time;
    }

    /**
      * Sets the value of the 'Time' field.
      * @param value The value of 'Time'.
      * @return This builder.
      */
    public Builder setTime(long value) {
      validate(fields()[6], value);
      this.Time = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Time' field has been set.
      * @return True if the 'Time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Time' field.
      * @return This builder.
      */
    public Builder clearTime() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderPrice' field.
      * @return The value.
      */
    public Double getOrderPrice() {
      return OrderPrice;
    }

    /**
      * Sets the value of the 'OrderPrice' field.
      * @param value The value of 'OrderPrice'.
      * @return This builder.
      */
    public Builder setOrderPrice(double value) {
      validate(fields()[7], value);
      this.OrderPrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderPrice' field has been set.
      * @return True if the 'OrderPrice' field has been set, false otherwise.
      */
    public boolean hasOrderPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'OrderPrice' field.
      * @return This builder.
      */
    public Builder clearOrderPrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderVolume' field.
      * @return The value.
      */
    public Double getOrderVolume() {
      return OrderVolume;
    }

    /**
      * Sets the value of the 'OrderVolume' field.
      * @param value The value of 'OrderVolume'.
      * @return This builder.
      */
    public Builder setOrderVolume(double value) {
      validate(fields()[8], value);
      this.OrderVolume = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderVolume' field has been set.
      * @return True if the 'OrderVolume' field has been set, false otherwise.
      */
    public boolean hasOrderVolume() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'OrderVolume' field.
      * @return This builder.
      */
    public Builder clearOrderVolume() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderCode' field.
      * @return The value.
      */
    public CharSequence getOrderCode() {
      return OrderCode;
    }

    /**
      * Sets the value of the 'OrderCode' field.
      * @param value The value of 'OrderCode'.
      * @return This builder.
      */
    public Builder setOrderCode(CharSequence value) {
      validate(fields()[9], value);
      this.OrderCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderCode' field has been set.
      * @return True if the 'OrderCode' field has been set, false otherwise.
      */
    public boolean hasOrderCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'OrderCode' field.
      * @return This builder.
      */
    public Builder clearOrderCode() {
      OrderCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderType' field.
      * @return The value.
      */
    public CharSequence getOrderType() {
      return OrderType;
    }

    /**
      * Sets the value of the 'OrderType' field.
      * @param value The value of 'OrderType'.
      * @return This builder.
      */
    public Builder setOrderType(CharSequence value) {
      validate(fields()[10], value);
      this.OrderType = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderType' field has been set.
      * @return True if the 'OrderType' field has been set, false otherwise.
      */
    public boolean hasOrderType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'OrderType' field.
      * @return This builder.
      */
    public Builder clearOrderType() {
      OrderType = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SZorder build() {
      try {
        SZorder record = new SZorder();
        record.LocalTimeStamp = fieldSetFlags()[0] ? this.LocalTimeStamp : (Integer) defaultValue(fields()[0]);
        record.QuotationFlag = fieldSetFlags()[1] ? this.QuotationFlag : (CharSequence) defaultValue(fields()[1]);
        record.SetID = fieldSetFlags()[2] ? this.SetID : (Integer) defaultValue(fields()[2]);
        record.RecID = fieldSetFlags()[3] ? this.RecID : (Long) defaultValue(fields()[3]);
        record.Symbol = fieldSetFlags()[4] ? this.Symbol : (CharSequence) defaultValue(fields()[4]);
        record.SymbolSource = fieldSetFlags()[5] ? this.SymbolSource : (CharSequence) defaultValue(fields()[5]);
        record.Time = fieldSetFlags()[6] ? this.Time : (Long) defaultValue(fields()[6]);
        record.OrderPrice = fieldSetFlags()[7] ? this.OrderPrice : (Double) defaultValue(fields()[7]);
        record.OrderVolume = fieldSetFlags()[8] ? this.OrderVolume : (Double) defaultValue(fields()[8]);
        record.OrderCode = fieldSetFlags()[9] ? this.OrderCode : (CharSequence) defaultValue(fields()[9]);
        record.OrderType = fieldSetFlags()[10] ? this.OrderType : (CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SZorder>
    WRITER$ = (org.apache.avro.io.DatumWriter<SZorder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SZorder>
    READER$ = (org.apache.avro.io.DatumReader<SZorder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
