/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package wangzitian.realtime;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ZhiShu extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4601268453219323643L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ZhiShu\",\"namespace\":\"wangzitian.realtime\",\"fields\":[{\"name\":\"LocalTimeStamp\",\"type\":\"int\"},{\"name\":\"QuotationFlag\",\"type\":[\"string\",\"null\"]},{\"name\":\"Time\",\"type\":[\"long\",\"null\"]},{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"PreClosePrice\",\"type\":[\"double\",\"null\"]},{\"name\":\"OpenPrice\",\"type\":[\"double\",\"null\"]},{\"name\":\"HighPrice\",\"type\":[\"double\",\"null\"]},{\"name\":\"LowPrice\",\"type\":[\"double\",\"null\"]},{\"name\":\"LastPrice\",\"type\":[\"double\",\"null\"]},{\"name\":\"TotalVolume\",\"type\":[\"double\",\"null\"]},{\"name\":\"PacketTimeStamp_SH\",\"type\":[\"long\",\"null\"]},{\"name\":\"TradeTime_SH\",\"type\":[\"int\",\"null\"]},{\"name\":\"TotalAmount_SH\",\"type\":[\"double\",\"null\"]},{\"name\":\"ClosePrice_SH\",\"type\":[\"double\",\"null\"]},{\"name\":\"SymbolSource_SZ\",\"type\":[\"string\",\"null\"]},{\"name\":\"SecurityPhaseTag_SZ\",\"type\":[\"string\",\"null\"]},{\"name\":\"TotalNo_SZ\",\"type\":[\"long\",\"null\"]},{\"name\":\"SampleNo_SZ\",\"type\":[\"long\",\"null\"]}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<ZhiShu> ENCODER =
            new BinaryMessageEncoder<ZhiShu>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<ZhiShu> DECODER =
            new BinaryMessageDecoder<ZhiShu>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<ZhiShu> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<ZhiShu> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<ZhiShu>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this ZhiShu to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a ZhiShu from a ByteBuffer. */
    public static ZhiShu fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public int LocalTimeStamp;
    @Deprecated public java.lang.CharSequence QuotationFlag;
    @Deprecated public java.lang.Long Time;
    @Deprecated public java.lang.CharSequence Symbol;
    @Deprecated public java.lang.Double PreClosePrice;
    @Deprecated public java.lang.Double OpenPrice;
    @Deprecated public java.lang.Double HighPrice;
    @Deprecated public java.lang.Double LowPrice;
    @Deprecated public java.lang.Double LastPrice;
    @Deprecated public java.lang.Double TotalVolume;
    @Deprecated public java.lang.Long PacketTimeStamp_SH;
    @Deprecated public java.lang.Integer TradeTime_SH;
    @Deprecated public java.lang.Double TotalAmount_SH;
    @Deprecated public java.lang.Double ClosePrice_SH;
    @Deprecated public java.lang.CharSequence SymbolSource_SZ;
    @Deprecated public java.lang.CharSequence SecurityPhaseTag_SZ;
    @Deprecated public java.lang.Long TotalNo_SZ;
    @Deprecated public java.lang.Long SampleNo_SZ;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public ZhiShu() {}

    /**
     * All-args constructor.
     * @param LocalTimeStamp The new value for LocalTimeStamp
     * @param QuotationFlag The new value for QuotationFlag
     * @param Time The new value for Time
     * @param Symbol The new value for Symbol
     * @param PreClosePrice The new value for PreClosePrice
     * @param OpenPrice The new value for OpenPrice
     * @param HighPrice The new value for HighPrice
     * @param LowPrice The new value for LowPrice
     * @param LastPrice The new value for LastPrice
     * @param TotalVolume The new value for TotalVolume
     * @param PacketTimeStamp_SH The new value for PacketTimeStamp_SH
     * @param TradeTime_SH The new value for TradeTime_SH
     * @param TotalAmount_SH The new value for TotalAmount_SH
     * @param ClosePrice_SH The new value for ClosePrice_SH
     * @param SymbolSource_SZ The new value for SymbolSource_SZ
     * @param SecurityPhaseTag_SZ The new value for SecurityPhaseTag_SZ
     * @param TotalNo_SZ The new value for TotalNo_SZ
     * @param SampleNo_SZ The new value for SampleNo_SZ
     */
    public ZhiShu(java.lang.Integer LocalTimeStamp, java.lang.CharSequence QuotationFlag, java.lang.Long Time, java.lang.CharSequence Symbol, java.lang.Double PreClosePrice, java.lang.Double OpenPrice, java.lang.Double HighPrice, java.lang.Double LowPrice, java.lang.Double LastPrice, java.lang.Double TotalVolume, java.lang.Long PacketTimeStamp_SH, java.lang.Integer TradeTime_SH, java.lang.Double TotalAmount_SH, java.lang.Double ClosePrice_SH, java.lang.CharSequence SymbolSource_SZ, java.lang.CharSequence SecurityPhaseTag_SZ, java.lang.Long TotalNo_SZ, java.lang.Long SampleNo_SZ) {
        this.LocalTimeStamp = LocalTimeStamp;
        this.QuotationFlag = QuotationFlag;
        this.Time = Time;
        this.Symbol = Symbol;
        this.PreClosePrice = PreClosePrice;
        this.OpenPrice = OpenPrice;
        this.HighPrice = HighPrice;
        this.LowPrice = LowPrice;
        this.LastPrice = LastPrice;
        this.TotalVolume = TotalVolume;
        this.PacketTimeStamp_SH = PacketTimeStamp_SH;
        this.TradeTime_SH = TradeTime_SH;
        this.TotalAmount_SH = TotalAmount_SH;
        this.ClosePrice_SH = ClosePrice_SH;
        this.SymbolSource_SZ = SymbolSource_SZ;
        this.SecurityPhaseTag_SZ = SecurityPhaseTag_SZ;
        this.TotalNo_SZ = TotalNo_SZ;
        this.SampleNo_SZ = SampleNo_SZ;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return LocalTimeStamp;
            case 1: return QuotationFlag;
            case 2: return Time;
            case 3: return Symbol;
            case 4: return PreClosePrice;
            case 5: return OpenPrice;
            case 6: return HighPrice;
            case 7: return LowPrice;
            case 8: return LastPrice;
            case 9: return TotalVolume;
            case 10: return PacketTimeStamp_SH;
            case 11: return TradeTime_SH;
            case 12: return TotalAmount_SH;
            case 13: return ClosePrice_SH;
            case 14: return SymbolSource_SZ;
            case 15: return SecurityPhaseTag_SZ;
            case 16: return TotalNo_SZ;
            case 17: return SampleNo_SZ;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: LocalTimeStamp = (java.lang.Integer)value$; break;
            case 1: QuotationFlag = (java.lang.CharSequence)value$; break;
            case 2: Time = (java.lang.Long)value$; break;
            case 3: Symbol = (java.lang.CharSequence)value$; break;
            case 4: PreClosePrice = (java.lang.Double)value$; break;
            case 5: OpenPrice = (java.lang.Double)value$; break;
            case 6: HighPrice = (java.lang.Double)value$; break;
            case 7: LowPrice = (java.lang.Double)value$; break;
            case 8: LastPrice = (java.lang.Double)value$; break;
            case 9: TotalVolume = (java.lang.Double)value$; break;
            case 10: PacketTimeStamp_SH = (java.lang.Long)value$; break;
            case 11: TradeTime_SH = (java.lang.Integer)value$; break;
            case 12: TotalAmount_SH = (java.lang.Double)value$; break;
            case 13: ClosePrice_SH = (java.lang.Double)value$; break;
            case 14: SymbolSource_SZ = (java.lang.CharSequence)value$; break;
            case 15: SecurityPhaseTag_SZ = (java.lang.CharSequence)value$; break;
            case 16: TotalNo_SZ = (java.lang.Long)value$; break;
            case 17: SampleNo_SZ = (java.lang.Long)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'LocalTimeStamp' field.
     * @return The value of the 'LocalTimeStamp' field.
     */
    public java.lang.Integer getLocalTimeStamp() {
        return LocalTimeStamp;
    }

    /**
     * Sets the value of the 'LocalTimeStamp' field.
     * @param value the value to set.
     */
    public void setLocalTimeStamp(java.lang.Integer value) {
        this.LocalTimeStamp = value;
    }

    /**
     * Gets the value of the 'QuotationFlag' field.
     * @return The value of the 'QuotationFlag' field.
     */
    public java.lang.CharSequence getQuotationFlag() {
        return QuotationFlag;
    }

    /**
     * Sets the value of the 'QuotationFlag' field.
     * @param value the value to set.
     */
    public void setQuotationFlag(java.lang.CharSequence value) {
        this.QuotationFlag = value;
    }

    /**
     * Gets the value of the 'Time' field.
     * @return The value of the 'Time' field.
     */
    public java.lang.Long getTime() {
        return Time;
    }

    /**
     * Sets the value of the 'Time' field.
     * @param value the value to set.
     */
    public void setTime(java.lang.Long value) {
        this.Time = value;
    }

    /**
     * Gets the value of the 'Symbol' field.
     * @return The value of the 'Symbol' field.
     */
    public java.lang.CharSequence getSymbol() {
        return Symbol;
    }

    /**
     * Sets the value of the 'Symbol' field.
     * @param value the value to set.
     */
    public void setSymbol(java.lang.CharSequence value) {
        this.Symbol = value;
    }

    /**
     * Gets the value of the 'PreClosePrice' field.
     * @return The value of the 'PreClosePrice' field.
     */
    public java.lang.Double getPreClosePrice() {
        return PreClosePrice;
    }

    /**
     * Sets the value of the 'PreClosePrice' field.
     * @param value the value to set.
     */
    public void setPreClosePrice(java.lang.Double value) {
        this.PreClosePrice = value;
    }

    /**
     * Gets the value of the 'OpenPrice' field.
     * @return The value of the 'OpenPrice' field.
     */
    public java.lang.Double getOpenPrice() {
        return OpenPrice;
    }

    /**
     * Sets the value of the 'OpenPrice' field.
     * @param value the value to set.
     */
    public void setOpenPrice(java.lang.Double value) {
        this.OpenPrice = value;
    }

    /**
     * Gets the value of the 'HighPrice' field.
     * @return The value of the 'HighPrice' field.
     */
    public java.lang.Double getHighPrice() {
        return HighPrice;
    }

    /**
     * Sets the value of the 'HighPrice' field.
     * @param value the value to set.
     */
    public void setHighPrice(java.lang.Double value) {
        this.HighPrice = value;
    }

    /**
     * Gets the value of the 'LowPrice' field.
     * @return The value of the 'LowPrice' field.
     */
    public java.lang.Double getLowPrice() {
        return LowPrice;
    }

    /**
     * Sets the value of the 'LowPrice' field.
     * @param value the value to set.
     */
    public void setLowPrice(java.lang.Double value) {
        this.LowPrice = value;
    }

    /**
     * Gets the value of the 'LastPrice' field.
     * @return The value of the 'LastPrice' field.
     */
    public java.lang.Double getLastPrice() {
        return LastPrice;
    }

    /**
     * Sets the value of the 'LastPrice' field.
     * @param value the value to set.
     */
    public void setLastPrice(java.lang.Double value) {
        this.LastPrice = value;
    }

    /**
     * Gets the value of the 'TotalVolume' field.
     * @return The value of the 'TotalVolume' field.
     */
    public java.lang.Double getTotalVolume() {
        return TotalVolume;
    }

    /**
     * Sets the value of the 'TotalVolume' field.
     * @param value the value to set.
     */
    public void setTotalVolume(java.lang.Double value) {
        this.TotalVolume = value;
    }

    /**
     * Gets the value of the 'PacketTimeStamp_SH' field.
     * @return The value of the 'PacketTimeStamp_SH' field.
     */
    public java.lang.Long getPacketTimeStampSH() {
        return PacketTimeStamp_SH;
    }

    /**
     * Sets the value of the 'PacketTimeStamp_SH' field.
     * @param value the value to set.
     */
    public void setPacketTimeStampSH(java.lang.Long value) {
        this.PacketTimeStamp_SH = value;
    }

    /**
     * Gets the value of the 'TradeTime_SH' field.
     * @return The value of the 'TradeTime_SH' field.
     */
    public java.lang.Integer getTradeTimeSH() {
        return TradeTime_SH;
    }

    /**
     * Sets the value of the 'TradeTime_SH' field.
     * @param value the value to set.
     */
    public void setTradeTimeSH(java.lang.Integer value) {
        this.TradeTime_SH = value;
    }

    /**
     * Gets the value of the 'TotalAmount_SH' field.
     * @return The value of the 'TotalAmount_SH' field.
     */
    public java.lang.Double getTotalAmountSH() {
        return TotalAmount_SH;
    }

    /**
     * Sets the value of the 'TotalAmount_SH' field.
     * @param value the value to set.
     */
    public void setTotalAmountSH(java.lang.Double value) {
        this.TotalAmount_SH = value;
    }

    /**
     * Gets the value of the 'ClosePrice_SH' field.
     * @return The value of the 'ClosePrice_SH' field.
     */
    public java.lang.Double getClosePriceSH() {
        return ClosePrice_SH;
    }

    /**
     * Sets the value of the 'ClosePrice_SH' field.
     * @param value the value to set.
     */
    public void setClosePriceSH(java.lang.Double value) {
        this.ClosePrice_SH = value;
    }

    /**
     * Gets the value of the 'SymbolSource_SZ' field.
     * @return The value of the 'SymbolSource_SZ' field.
     */
    public java.lang.CharSequence getSymbolSourceSZ() {
        return SymbolSource_SZ;
    }

    /**
     * Sets the value of the 'SymbolSource_SZ' field.
     * @param value the value to set.
     */
    public void setSymbolSourceSZ(java.lang.CharSequence value) {
        this.SymbolSource_SZ = value;
    }

    /**
     * Gets the value of the 'SecurityPhaseTag_SZ' field.
     * @return The value of the 'SecurityPhaseTag_SZ' field.
     */
    public java.lang.CharSequence getSecurityPhaseTagSZ() {
        return SecurityPhaseTag_SZ;
    }

    /**
     * Sets the value of the 'SecurityPhaseTag_SZ' field.
     * @param value the value to set.
     */
    public void setSecurityPhaseTagSZ(java.lang.CharSequence value) {
        this.SecurityPhaseTag_SZ = value;
    }

    /**
     * Gets the value of the 'TotalNo_SZ' field.
     * @return The value of the 'TotalNo_SZ' field.
     */
    public java.lang.Long getTotalNoSZ() {
        return TotalNo_SZ;
    }

    /**
     * Sets the value of the 'TotalNo_SZ' field.
     * @param value the value to set.
     */
    public void setTotalNoSZ(java.lang.Long value) {
        this.TotalNo_SZ = value;
    }

    /**
     * Gets the value of the 'SampleNo_SZ' field.
     * @return The value of the 'SampleNo_SZ' field.
     */
    public java.lang.Long getSampleNoSZ() {
        return SampleNo_SZ;
    }

    /**
     * Sets the value of the 'SampleNo_SZ' field.
     * @param value the value to set.
     */
    public void setSampleNoSZ(java.lang.Long value) {
        this.SampleNo_SZ = value;
    }

    /**
     * Creates a new ZhiShu RecordBuilder.
     * @return A new ZhiShu RecordBuilder
     */
    public static wangzitian.realtime.ZhiShu.Builder newBuilder() {
        return new wangzitian.realtime.ZhiShu.Builder();
    }

    /**
     * Creates a new ZhiShu RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new ZhiShu RecordBuilder
     */
    public static wangzitian.realtime.ZhiShu.Builder newBuilder(wangzitian.realtime.ZhiShu.Builder other) {
        return new wangzitian.realtime.ZhiShu.Builder(other);
    }

    /**
     * Creates a new ZhiShu RecordBuilder by copying an existing ZhiShu instance.
     * @param other The existing instance to copy.
     * @return A new ZhiShu RecordBuilder
     */
    public static wangzitian.realtime.ZhiShu.Builder newBuilder(wangzitian.realtime.ZhiShu other) {
        return new wangzitian.realtime.ZhiShu.Builder(other);
    }

    /**
     * RecordBuilder for ZhiShu instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ZhiShu>
            implements org.apache.avro.data.RecordBuilder<ZhiShu> {

        private int LocalTimeStamp;
        private java.lang.CharSequence QuotationFlag;
        private java.lang.Long Time;
        private java.lang.CharSequence Symbol;
        private java.lang.Double PreClosePrice;
        private java.lang.Double OpenPrice;
        private java.lang.Double HighPrice;
        private java.lang.Double LowPrice;
        private java.lang.Double LastPrice;
        private java.lang.Double TotalVolume;
        private java.lang.Long PacketTimeStamp_SH;
        private java.lang.Integer TradeTime_SH;
        private java.lang.Double TotalAmount_SH;
        private java.lang.Double ClosePrice_SH;
        private java.lang.CharSequence SymbolSource_SZ;
        private java.lang.CharSequence SecurityPhaseTag_SZ;
        private java.lang.Long TotalNo_SZ;
        private java.lang.Long SampleNo_SZ;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(wangzitian.realtime.ZhiShu.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.LocalTimeStamp)) {
                this.LocalTimeStamp = data().deepCopy(fields()[0].schema(), other.LocalTimeStamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.QuotationFlag)) {
                this.QuotationFlag = data().deepCopy(fields()[1].schema(), other.QuotationFlag);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.Time)) {
                this.Time = data().deepCopy(fields()[2].schema(), other.Time);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.Symbol)) {
                this.Symbol = data().deepCopy(fields()[3].schema(), other.Symbol);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.PreClosePrice)) {
                this.PreClosePrice = data().deepCopy(fields()[4].schema(), other.PreClosePrice);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.OpenPrice)) {
                this.OpenPrice = data().deepCopy(fields()[5].schema(), other.OpenPrice);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.HighPrice)) {
                this.HighPrice = data().deepCopy(fields()[6].schema(), other.HighPrice);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.LowPrice)) {
                this.LowPrice = data().deepCopy(fields()[7].schema(), other.LowPrice);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.LastPrice)) {
                this.LastPrice = data().deepCopy(fields()[8].schema(), other.LastPrice);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.TotalVolume)) {
                this.TotalVolume = data().deepCopy(fields()[9].schema(), other.TotalVolume);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.PacketTimeStamp_SH)) {
                this.PacketTimeStamp_SH = data().deepCopy(fields()[10].schema(), other.PacketTimeStamp_SH);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.TradeTime_SH)) {
                this.TradeTime_SH = data().deepCopy(fields()[11].schema(), other.TradeTime_SH);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.TotalAmount_SH)) {
                this.TotalAmount_SH = data().deepCopy(fields()[12].schema(), other.TotalAmount_SH);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.ClosePrice_SH)) {
                this.ClosePrice_SH = data().deepCopy(fields()[13].schema(), other.ClosePrice_SH);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.SymbolSource_SZ)) {
                this.SymbolSource_SZ = data().deepCopy(fields()[14].schema(), other.SymbolSource_SZ);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.SecurityPhaseTag_SZ)) {
                this.SecurityPhaseTag_SZ = data().deepCopy(fields()[15].schema(), other.SecurityPhaseTag_SZ);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.TotalNo_SZ)) {
                this.TotalNo_SZ = data().deepCopy(fields()[16].schema(), other.TotalNo_SZ);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.SampleNo_SZ)) {
                this.SampleNo_SZ = data().deepCopy(fields()[17].schema(), other.SampleNo_SZ);
                fieldSetFlags()[17] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing ZhiShu instance
         * @param other The existing instance to copy.
         */
        private Builder(wangzitian.realtime.ZhiShu other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.LocalTimeStamp)) {
                this.LocalTimeStamp = data().deepCopy(fields()[0].schema(), other.LocalTimeStamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.QuotationFlag)) {
                this.QuotationFlag = data().deepCopy(fields()[1].schema(), other.QuotationFlag);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.Time)) {
                this.Time = data().deepCopy(fields()[2].schema(), other.Time);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.Symbol)) {
                this.Symbol = data().deepCopy(fields()[3].schema(), other.Symbol);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.PreClosePrice)) {
                this.PreClosePrice = data().deepCopy(fields()[4].schema(), other.PreClosePrice);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.OpenPrice)) {
                this.OpenPrice = data().deepCopy(fields()[5].schema(), other.OpenPrice);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.HighPrice)) {
                this.HighPrice = data().deepCopy(fields()[6].schema(), other.HighPrice);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.LowPrice)) {
                this.LowPrice = data().deepCopy(fields()[7].schema(), other.LowPrice);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.LastPrice)) {
                this.LastPrice = data().deepCopy(fields()[8].schema(), other.LastPrice);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.TotalVolume)) {
                this.TotalVolume = data().deepCopy(fields()[9].schema(), other.TotalVolume);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.PacketTimeStamp_SH)) {
                this.PacketTimeStamp_SH = data().deepCopy(fields()[10].schema(), other.PacketTimeStamp_SH);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.TradeTime_SH)) {
                this.TradeTime_SH = data().deepCopy(fields()[11].schema(), other.TradeTime_SH);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.TotalAmount_SH)) {
                this.TotalAmount_SH = data().deepCopy(fields()[12].schema(), other.TotalAmount_SH);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.ClosePrice_SH)) {
                this.ClosePrice_SH = data().deepCopy(fields()[13].schema(), other.ClosePrice_SH);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.SymbolSource_SZ)) {
                this.SymbolSource_SZ = data().deepCopy(fields()[14].schema(), other.SymbolSource_SZ);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.SecurityPhaseTag_SZ)) {
                this.SecurityPhaseTag_SZ = data().deepCopy(fields()[15].schema(), other.SecurityPhaseTag_SZ);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.TotalNo_SZ)) {
                this.TotalNo_SZ = data().deepCopy(fields()[16].schema(), other.TotalNo_SZ);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.SampleNo_SZ)) {
                this.SampleNo_SZ = data().deepCopy(fields()[17].schema(), other.SampleNo_SZ);
                fieldSetFlags()[17] = true;
            }
        }

        /**
         * Gets the value of the 'LocalTimeStamp' field.
         * @return The value.
         */
        public java.lang.Integer getLocalTimeStamp() {
            return LocalTimeStamp;
        }

        /**
         * Sets the value of the 'LocalTimeStamp' field.
         * @param value The value of 'LocalTimeStamp'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setLocalTimeStamp(int value) {
            validate(fields()[0], value);
            this.LocalTimeStamp = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'LocalTimeStamp' field has been set.
         * @return True if the 'LocalTimeStamp' field has been set, false otherwise.
         */
        public boolean hasLocalTimeStamp() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'LocalTimeStamp' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearLocalTimeStamp() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'QuotationFlag' field.
         * @return The value.
         */
        public java.lang.CharSequence getQuotationFlag() {
            return QuotationFlag;
        }

        /**
         * Sets the value of the 'QuotationFlag' field.
         * @param value The value of 'QuotationFlag'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setQuotationFlag(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.QuotationFlag = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'QuotationFlag' field has been set.
         * @return True if the 'QuotationFlag' field has been set, false otherwise.
         */
        public boolean hasQuotationFlag() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'QuotationFlag' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearQuotationFlag() {
            QuotationFlag = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'Time' field.
         * @return The value.
         */
        public java.lang.Long getTime() {
            return Time;
        }

        /**
         * Sets the value of the 'Time' field.
         * @param value The value of 'Time'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setTime(java.lang.Long value) {
            validate(fields()[2], value);
            this.Time = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'Time' field has been set.
         * @return True if the 'Time' field has been set, false otherwise.
         */
        public boolean hasTime() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'Time' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearTime() {
            Time = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'Symbol' field.
         * @return The value.
         */
        public java.lang.CharSequence getSymbol() {
            return Symbol;
        }

        /**
         * Sets the value of the 'Symbol' field.
         * @param value The value of 'Symbol'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setSymbol(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.Symbol = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'Symbol' field has been set.
         * @return True if the 'Symbol' field has been set, false otherwise.
         */
        public boolean hasSymbol() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'Symbol' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearSymbol() {
            Symbol = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'PreClosePrice' field.
         * @return The value.
         */
        public java.lang.Double getPreClosePrice() {
            return PreClosePrice;
        }

        /**
         * Sets the value of the 'PreClosePrice' field.
         * @param value The value of 'PreClosePrice'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setPreClosePrice(java.lang.Double value) {
            validate(fields()[4], value);
            this.PreClosePrice = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'PreClosePrice' field has been set.
         * @return True if the 'PreClosePrice' field has been set, false otherwise.
         */
        public boolean hasPreClosePrice() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'PreClosePrice' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearPreClosePrice() {
            PreClosePrice = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'OpenPrice' field.
         * @return The value.
         */
        public java.lang.Double getOpenPrice() {
            return OpenPrice;
        }

        /**
         * Sets the value of the 'OpenPrice' field.
         * @param value The value of 'OpenPrice'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setOpenPrice(java.lang.Double value) {
            validate(fields()[5], value);
            this.OpenPrice = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'OpenPrice' field has been set.
         * @return True if the 'OpenPrice' field has been set, false otherwise.
         */
        public boolean hasOpenPrice() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'OpenPrice' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearOpenPrice() {
            OpenPrice = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'HighPrice' field.
         * @return The value.
         */
        public java.lang.Double getHighPrice() {
            return HighPrice;
        }

        /**
         * Sets the value of the 'HighPrice' field.
         * @param value The value of 'HighPrice'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setHighPrice(java.lang.Double value) {
            validate(fields()[6], value);
            this.HighPrice = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'HighPrice' field has been set.
         * @return True if the 'HighPrice' field has been set, false otherwise.
         */
        public boolean hasHighPrice() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'HighPrice' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearHighPrice() {
            HighPrice = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'LowPrice' field.
         * @return The value.
         */
        public java.lang.Double getLowPrice() {
            return LowPrice;
        }

        /**
         * Sets the value of the 'LowPrice' field.
         * @param value The value of 'LowPrice'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setLowPrice(java.lang.Double value) {
            validate(fields()[7], value);
            this.LowPrice = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'LowPrice' field has been set.
         * @return True if the 'LowPrice' field has been set, false otherwise.
         */
        public boolean hasLowPrice() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'LowPrice' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearLowPrice() {
            LowPrice = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'LastPrice' field.
         * @return The value.
         */
        public java.lang.Double getLastPrice() {
            return LastPrice;
        }

        /**
         * Sets the value of the 'LastPrice' field.
         * @param value The value of 'LastPrice'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setLastPrice(java.lang.Double value) {
            validate(fields()[8], value);
            this.LastPrice = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'LastPrice' field has been set.
         * @return True if the 'LastPrice' field has been set, false otherwise.
         */
        public boolean hasLastPrice() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'LastPrice' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearLastPrice() {
            LastPrice = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'TotalVolume' field.
         * @return The value.
         */
        public java.lang.Double getTotalVolume() {
            return TotalVolume;
        }

        /**
         * Sets the value of the 'TotalVolume' field.
         * @param value The value of 'TotalVolume'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setTotalVolume(java.lang.Double value) {
            validate(fields()[9], value);
            this.TotalVolume = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'TotalVolume' field has been set.
         * @return True if the 'TotalVolume' field has been set, false otherwise.
         */
        public boolean hasTotalVolume() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'TotalVolume' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearTotalVolume() {
            TotalVolume = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'PacketTimeStamp_SH' field.
         * @return The value.
         */
        public java.lang.Long getPacketTimeStampSH() {
            return PacketTimeStamp_SH;
        }

        /**
         * Sets the value of the 'PacketTimeStamp_SH' field.
         * @param value The value of 'PacketTimeStamp_SH'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setPacketTimeStampSH(java.lang.Long value) {
            validate(fields()[10], value);
            this.PacketTimeStamp_SH = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'PacketTimeStamp_SH' field has been set.
         * @return True if the 'PacketTimeStamp_SH' field has been set, false otherwise.
         */
        public boolean hasPacketTimeStampSH() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'PacketTimeStamp_SH' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearPacketTimeStampSH() {
            PacketTimeStamp_SH = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'TradeTime_SH' field.
         * @return The value.
         */
        public java.lang.Integer getTradeTimeSH() {
            return TradeTime_SH;
        }

        /**
         * Sets the value of the 'TradeTime_SH' field.
         * @param value The value of 'TradeTime_SH'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setTradeTimeSH(java.lang.Integer value) {
            validate(fields()[11], value);
            this.TradeTime_SH = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'TradeTime_SH' field has been set.
         * @return True if the 'TradeTime_SH' field has been set, false otherwise.
         */
        public boolean hasTradeTimeSH() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'TradeTime_SH' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearTradeTimeSH() {
            TradeTime_SH = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'TotalAmount_SH' field.
         * @return The value.
         */
        public java.lang.Double getTotalAmountSH() {
            return TotalAmount_SH;
        }

        /**
         * Sets the value of the 'TotalAmount_SH' field.
         * @param value The value of 'TotalAmount_SH'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setTotalAmountSH(java.lang.Double value) {
            validate(fields()[12], value);
            this.TotalAmount_SH = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'TotalAmount_SH' field has been set.
         * @return True if the 'TotalAmount_SH' field has been set, false otherwise.
         */
        public boolean hasTotalAmountSH() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'TotalAmount_SH' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearTotalAmountSH() {
            TotalAmount_SH = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'ClosePrice_SH' field.
         * @return The value.
         */
        public java.lang.Double getClosePriceSH() {
            return ClosePrice_SH;
        }

        /**
         * Sets the value of the 'ClosePrice_SH' field.
         * @param value The value of 'ClosePrice_SH'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setClosePriceSH(java.lang.Double value) {
            validate(fields()[13], value);
            this.ClosePrice_SH = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'ClosePrice_SH' field has been set.
         * @return True if the 'ClosePrice_SH' field has been set, false otherwise.
         */
        public boolean hasClosePriceSH() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'ClosePrice_SH' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearClosePriceSH() {
            ClosePrice_SH = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'SymbolSource_SZ' field.
         * @return The value.
         */
        public java.lang.CharSequence getSymbolSourceSZ() {
            return SymbolSource_SZ;
        }

        /**
         * Sets the value of the 'SymbolSource_SZ' field.
         * @param value The value of 'SymbolSource_SZ'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setSymbolSourceSZ(java.lang.CharSequence value) {
            validate(fields()[14], value);
            this.SymbolSource_SZ = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'SymbolSource_SZ' field has been set.
         * @return True if the 'SymbolSource_SZ' field has been set, false otherwise.
         */
        public boolean hasSymbolSourceSZ() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'SymbolSource_SZ' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearSymbolSourceSZ() {
            SymbolSource_SZ = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'SecurityPhaseTag_SZ' field.
         * @return The value.
         */
        public java.lang.CharSequence getSecurityPhaseTagSZ() {
            return SecurityPhaseTag_SZ;
        }

        /**
         * Sets the value of the 'SecurityPhaseTag_SZ' field.
         * @param value The value of 'SecurityPhaseTag_SZ'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setSecurityPhaseTagSZ(java.lang.CharSequence value) {
            validate(fields()[15], value);
            this.SecurityPhaseTag_SZ = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'SecurityPhaseTag_SZ' field has been set.
         * @return True if the 'SecurityPhaseTag_SZ' field has been set, false otherwise.
         */
        public boolean hasSecurityPhaseTagSZ() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'SecurityPhaseTag_SZ' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearSecurityPhaseTagSZ() {
            SecurityPhaseTag_SZ = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'TotalNo_SZ' field.
         * @return The value.
         */
        public java.lang.Long getTotalNoSZ() {
            return TotalNo_SZ;
        }

        /**
         * Sets the value of the 'TotalNo_SZ' field.
         * @param value The value of 'TotalNo_SZ'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setTotalNoSZ(java.lang.Long value) {
            validate(fields()[16], value);
            this.TotalNo_SZ = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'TotalNo_SZ' field has been set.
         * @return True if the 'TotalNo_SZ' field has been set, false otherwise.
         */
        public boolean hasTotalNoSZ() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'TotalNo_SZ' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearTotalNoSZ() {
            TotalNo_SZ = null;
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'SampleNo_SZ' field.
         * @return The value.
         */
        public java.lang.Long getSampleNoSZ() {
            return SampleNo_SZ;
        }

        /**
         * Sets the value of the 'SampleNo_SZ' field.
         * @param value The value of 'SampleNo_SZ'.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder setSampleNoSZ(java.lang.Long value) {
            validate(fields()[17], value);
            this.SampleNo_SZ = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'SampleNo_SZ' field has been set.
         * @return True if the 'SampleNo_SZ' field has been set, false otherwise.
         */
        public boolean hasSampleNoSZ() {
            return fieldSetFlags()[17];
        }


        /**
         * Clears the value of the 'SampleNo_SZ' field.
         * @return This builder.
         */
        public wangzitian.realtime.ZhiShu.Builder clearSampleNoSZ() {
            SampleNo_SZ = null;
            fieldSetFlags()[17] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public ZhiShu build() {
            try {
                ZhiShu record = new ZhiShu();
                record.LocalTimeStamp = fieldSetFlags()[0] ? this.LocalTimeStamp : (java.lang.Integer) defaultValue(fields()[0]);
                record.QuotationFlag = fieldSetFlags()[1] ? this.QuotationFlag : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.Time = fieldSetFlags()[2] ? this.Time : (java.lang.Long) defaultValue(fields()[2]);
                record.Symbol = fieldSetFlags()[3] ? this.Symbol : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.PreClosePrice = fieldSetFlags()[4] ? this.PreClosePrice : (java.lang.Double) defaultValue(fields()[4]);
                record.OpenPrice = fieldSetFlags()[5] ? this.OpenPrice : (java.lang.Double) defaultValue(fields()[5]);
                record.HighPrice = fieldSetFlags()[6] ? this.HighPrice : (java.lang.Double) defaultValue(fields()[6]);
                record.LowPrice = fieldSetFlags()[7] ? this.LowPrice : (java.lang.Double) defaultValue(fields()[7]);
                record.LastPrice = fieldSetFlags()[8] ? this.LastPrice : (java.lang.Double) defaultValue(fields()[8]);
                record.TotalVolume = fieldSetFlags()[9] ? this.TotalVolume : (java.lang.Double) defaultValue(fields()[9]);
                record.PacketTimeStamp_SH = fieldSetFlags()[10] ? this.PacketTimeStamp_SH : (java.lang.Long) defaultValue(fields()[10]);
                record.TradeTime_SH = fieldSetFlags()[11] ? this.TradeTime_SH : (java.lang.Integer) defaultValue(fields()[11]);
                record.TotalAmount_SH = fieldSetFlags()[12] ? this.TotalAmount_SH : (java.lang.Double) defaultValue(fields()[12]);
                record.ClosePrice_SH = fieldSetFlags()[13] ? this.ClosePrice_SH : (java.lang.Double) defaultValue(fields()[13]);
                record.SymbolSource_SZ = fieldSetFlags()[14] ? this.SymbolSource_SZ : (java.lang.CharSequence) defaultValue(fields()[14]);
                record.SecurityPhaseTag_SZ = fieldSetFlags()[15] ? this.SecurityPhaseTag_SZ : (java.lang.CharSequence) defaultValue(fields()[15]);
                record.TotalNo_SZ = fieldSetFlags()[16] ? this.TotalNo_SZ : (java.lang.Long) defaultValue(fields()[16]);
                record.SampleNo_SZ = fieldSetFlags()[17] ? this.SampleNo_SZ : (java.lang.Long) defaultValue(fields()[17]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<ZhiShu>
            WRITER$ = (org.apache.avro.io.DatumWriter<ZhiShu>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<ZhiShu>
            READER$ = (org.apache.avro.io.DatumReader<ZhiShu>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
